#!/bin/bash

# URL for the Flask app on deployment server
FLASK_URL="http://172.233.182.205:5000"

# Function to fetch and display the deployment menu
fetch_menu() {
    echo "Fetching deployment menu..."
    response=$(curl -s "$FLASK_URL/")

    # Check if response contains the expected keys
    if [[ "$response" == *"options"* && "$response" == *"message"* ]]; then
        # Display the welcome message
        message=$(echo "$response" | jq -r '.message')
        echo "$message"

        # Display the available options
        echo "Available options:"
        echo "$response" | jq -r '.options[] | "\(.option)"' | nl -w2 -s") "
    else
        echo "Error: Failed to fetch the deployment menu. Response:"
        echo "$response"
        exit 1
    fi
}

update_package() {
    # Prompt the user for the required fields
    read -p "Enter the package ID: " package_id
    read -p "Enter the version number: " version_number
    read -p "Enter the new status: " status
    read -p "Enter the bundle type (e.g., frontend, backend, dmz): " bundle_type

    # Validate input
    if [[ -z "$package_id" || -z "$version_number" || -z "$status" || -z "$bundle_type" ]]; then
        echo "Error: All fields are required."
        return 1
    fi

    data=$(jq -n \
        --arg id "$package_id" \
        --arg version "$version_number" \
        --arg status "$status" \
        --arg type "$bundle_type" \
        '{id: $id, version: $version, status: $status, type: $type}')

    UPDATE_URL="$FLASK_URL/update_qa"
    echo "Updating package..."
    response=$(/usr/bin/curl -X POST -H "Content-Type: application/json" -d "$data" "$UPDATE_URL")

    # Check the response
    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to send the update request."
        return 1
    fi

    echo "Server Response:"
    echo "$response" | jq
}

upload_package() {
    # Ask for the directory path
    read -p "Enter the directory path to package and upload: " DIRECTORY

    # Validate the directory
    if [ ! -d "$DIRECTORY" ]; then
        echo "Error: Directory '$DIRECTORY' does not exist."
        exit 1
    fi

    # Check for .ini file
    INI_FILE="$DIRECTORY/package.ini"
    if [ ! -f "$INI_FILE" ]; then
        echo "Error: .ini file 'package.ini' not found in the directory '$DIRECTORY'."
        exit 1
    fi

    echo "Found .ini file: $INI_FILE"

    # Extract values from the .ini file
    PACKAGE_NAME=$(grep -E "^name[ ]*=" "$INI_FILE" | awk -F= '{print $2}' | xargs)
    PACKAGE_TYPE=$(grep -E "^type[ ]*=" "$INI_FILE" | awk -F= '{print $2}' | xargs)
    PACKAGE_ID=$(grep -E "^id[ ]*=" "$INI_FILE" | awk -F= '{print $2}' | xargs)
    PACKAGE_DESCRIPTION=$(grep -E "^description[ ]*=" "$INI_FILE" | awk -F= '{print $2}' | xargs)

    # Validate required fields
    if [ -z "$PACKAGE_NAME" ] || [ -z "$PACKAGE_TYPE" ] || [ -z "$PACKAGE_ID" ]; then
        echo "Error: Missing required values in the .ini file (name, type, or id)."
        exit 1
    fi

    # Create tarball
    TARBALL="${DIRECTORY%/}.tar.gz"
    tar -czf "$TARBALL" "$DIRECTORY"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to compress the directory."
        exit 1
    fi

    echo "Directory compressed to: $TARBALL"

    # Upload tarball
    echo "Uploading package: $TARBALL"
    UPLOAD_URL="$FLASK_URL/upload"
    RESPONSE=$(/usr/bin/curl -F "file=@$TARBALL" \
                     -F "name=$PACKAGE_NAME" \
                     -F "type=$PACKAGE_TYPE" \
                     -F "id=$PACKAGE_ID" \
                     -F "description=$PACKAGE_DESCRIPTION" \
                     "$UPLOAD_URL")

    echo "Server Response:"
    echo "$RESPONSE"
}

# Function to handle "Deploy to QA"
deploy_to_qa() {
    # Ask for the server name
    read -p "Enter the QA server name: " SERVER_NAME

    DEPLOY_URL="$FLASK_URL/deploy/qa/$SERVER_NAME"
    echo "Deploying to QA server: $SERVER_NAME..."
    RESPONSE=$(/usr/bin/curl -X POST "$DEPLOY_URL")

    if [ $? -ne 0 ]; then
        echo "Error: Deployment request failed."
        exit 1
    fi

    echo "Server Response:"
    echo "$RESPONSE"
}

deploy_to_prod() {
    # Prompt the user for the required inputs
    read -p "Enter the production server name (e.g., frontend00, frontend01, backend00, dmz00): " server_type
    read -p "Enter the server type (e.g., frontend, backend, dmz): " table_name

    # Validate inputs
    if [[ -z "$server_type" || -z "$table_name" ]]; then
        echo "Error: Both server type and table name are required."
        return 1
    fi

    DEPLOY_URL="$FLASK_URL/deploy/prod/$server_type"
    data="table=$table_name"

    echo "Deploying to production server type: $server_type..."
    response=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "$data" "$DEPLOY_URL")

    # Check the response
    if [[ $? -ne 0 ]]; then
        echo "Error: Deployment request failed."
        return 1
    fi

    echo "Server Response:"
    echo "$response" | jq
}


# Function to install the package
install_package() {
    # Ask for server name
    read -p "Enter the server name to install the package: " SERVER_NAME

    INSTALL_URL="$FLASK_URL/install/$SERVER_NAME"
    echo "Installing package with ID: $PACKAGE_ID..."
    RESPONSE=$(/usr/bin/curl -X POST "$INSTALL_URL")

    if [ $? -ne 0 ]; then
        echo "Error: Installation request failed."
        exit 1
    fi

    echo "Server Response:"
    echo "$RESPONSE"
}

# Function to process menu selection
select_option() {
    read -p "Enter the number corresponding to your choice: " choice_number

    # Validate input
    if ! [[ "$choice_number" =~ ^[0-9]+$ ]]; then
        echo "Invalid input. Please enter a numeric value."
        exit 1
    fi

    # Fetch the selected option's details
    total_options=$(echo "$response" | jq -r '.options | length')
    if (( choice_number < 1 || choice_number > total_options )); then
        echo "Invalid choice. Please select a valid option number."
        exit 1
    fi

    selected_option=$(echo "$response" | jq -r ".options[$((choice_number - 1))]")
    option_name=$(echo "$selected_option" | jq -r '.option')
    url=$(echo "$selected_option" | jq -r '.url')

    echo "You selected: $option_name"

    if [[ "$url" == "/upload" ]]; then
        upload_package
    elif [[ "$url" == "/deploy/qa" ]]; then
        deploy_to_qa
    elif [[ "$url" == "/install" ]]; then
        install_package
    elif [[ "$url" == "/update_qa" ]]; then
        update_package
    elif [[ "$url" == "/deploy/prod" ]]; then
        deploy_to_prod
    elif [[ "$url" == "/rollback" ]]; then
        echo "Rollback is not yet implemented."
        echo "Oh well...."
    else
        echo "Unsupported option."
    fi
}
# Main
while true; do
    fetch_menu
    select_option
done